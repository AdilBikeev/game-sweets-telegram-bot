import random
from tokenize import Number
from telebot import TeleBot

import private.storage as storage

def init(bot: TeleBot):
    # –ó–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
    MIN_SWEETS = 1 # –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª-–≤–æ üç¨
    MAX_SWEETS = 100 # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª-–≤–æ üç¨

    def process_digit_step(message):
        user_digit = message.text
        count_sweets = storage.get(message.chat.id)["count_sweets"]

        if (not user_digit.isdigit() or
            int(user_digit) < 1 or
            int(user_digit) > count_sweets):
                msg = bot.reply_to(message, f'–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –Ω–µ –±–æ–ª–µ–µ {count_sweets}')
                bot.register_next_step_handler(msg, process_digit_step)
                return
        
        if int(user_digit) == count_sweets: # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±—Ä–∞–ª –æ—Å—Ç–∞–≤—à–∏–µ—Å—è üç¨—ã
            bot.send_message(message.chat.id, f'–¢—ã –∑–∞–±—Ä–∞–ª –æ—Å—Ç–∞–≤—à–∏–µ—Å—è üç¨—ã –∏ –≤—ã–∏–≥—Ä–∞–ª ü•≥')
            storage.init(message.chat.id) ### –û—á–∏—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            return
        else: # –ï—Å–ª–∏ üç¨—ã –µ—â—ë –æ—Å—Ç–∞–ª–∏—Å—å –Ω–∞ —Å—Ç–æ–ª–µ
            reply_text = []
            offset = int(user_digit)
            count_sweets -= offset
            reply_text.append(f'–ù–∞ —Å—Ç–æ–ª–µ –æ—Å—Ç–∞–ª–æ—Å—å {count_sweets} üç¨')

            offset = random.randint(MIN_SWEETS, count_sweets)
            count_sweets -= offset
            storage.set(message.chat.id, "count_sweets", count_sweets)
            reply_text.append(f'"–ö–æ–º–ø—å—é—Ç–µ—Ä —Å —Ä—É–∫–∞–º–∏" –∑–∞–±—Ä–∞–ª —Å–æ —Å—Ç–æ–ª–∞ {offset} üç¨')
            
            if count_sweets != 0: # –ï—Å–ª–∏ üç¨—ã –µ—â—ë –µ—Å—Ç—å –Ω–∞ —Å—Ç–æ–ª–µ
                bot.register_next_step_handler(message, process_digit_step)
                reply_text.append(f'–ù–∞ —Å—Ç–æ–ª–µ –µ—â—ë –æ—Å—Ç–∞–ª–æ—Å—å {count_sweets} üç¨, —É —Ç–µ–±—è –µ—â—ë –µ—Å—Ç—å –≤—Å–µ —à–∞–Ω—Å—ã –≤—ã–∏–≥–∞—Ä—Ç—å!')
                reply_text.append(f'–°–∫–æ–ª—å–∫–æ üç¨ –≤—ã –≤–æ–∑—å–º–µ—Ç–µ? (–Ω–µ –±–æ–ª–µ–µ {count_sweets})')
                bot.send_message(message.chat.id, '\n'.join(reply_text))
            else: # –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ üç¨—ã –∑–∞–±—Ä–∞–ª –∫–æ–º–ø—å—é—Ç–µ—Ä
                reply_text.append(f'–ö–æ–º–ø—å—é—Ç–µ—Ä –≤—ã–∏–≥—Ä–∞–ª ü•≤')
                storage.init(message.chat.id) ### –û—á–∏—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
                bot.send_message(message.chat.id, '\n'.join(reply_text))
                return

    @bot.message_handler(func=lambda message: message.text.lower() == "start")
    def start_game(message):
        storage.init(message.chat.id) ### –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é —Ö—Ä–∞–Ω–∏–ª–∏—â–µ

        count_sweets = random.randint(MIN_SWEETS, MAX_SWEETS)
        storage.set(message.chat.id, "count_sweets", count_sweets)

        bot.send_message(message.chat.id, f"""
        –ò–≥—Ä–∞ "–ö–æ–Ω—Ñ–µ—Ç—ã"!
        –ù–∞ —Å—Ç–æ–ª–µ –ª–µ–∂–∏—Ç {count_sweets} üç¨
        """)

        bot.send_message(message.chat.id, f"""
        –°–∫–æ–ª—å–∫–æ üç¨ –≤—ã –≤–æ–∑—å–º–µ—Ç–µ? (–Ω–µ –±–æ–ª–µ–µ {count_sweets})
        """)

        bot.register_next_step_handler(message, process_digit_step)